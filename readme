.:: Labyrinthos 3000 ::.
  Fr√©gate Productions


 User's manual
===============

Launch the program with "python3 labyrinth.py" or simply "./labyrinth.py" when you're in the right folder. You do need the version 3 of python installed.


** Playing the game

Simply use the arrow keys to control the "x" representing your character. You can use the "Q" key to quit when playing, or just Ctrl+C.

Your goal is to reach the red square (or one of them, if there's more than one) ; you can't go through white squares ("walls").


** Game parameters

You can load levels in this game ! Simply write the path to the level file after the program when launching the game. A few levels are bundled with this game, but you can create your own.

Alternatively, you can call the game with the "help" option : this will print a short help and exit.



** Creating levels : editor use

This game comes bundled with a level editor ; we will be talking about its use, and editing levels by hand will be talked about later in the Meddler's guide.

To use the level editor, execute levelEditor.py as you would the game. You have two ways to start the level editor : either start with a blank slate or edit an existing level. If you run the editor without specifying any arguments, it'll give you a blank slate with all default options and a warning message.

To start from scratch, two options are essential : the -h option which specifies the height of the level (in squares) and the -w options which specifies its width. Both default to 20 ; you CANNOT edit those later, unless you start editing the levels by hand (see the Meddler's guide).

You can also use the -b option to tell the editor it should fill the slate with a particular block ; by default, it is filled with pathways. "0" is pathways, "1" is walls, "2" is objectives and "3" is spawn points.

An example of valid command would be :
./levelEditor.py -h 20 -w 35 -b 1

Here we are telling the editor we want a 20 squares high, 35 squares wide level, filled with walls.

You can also edit an existing level. This game comes bundled with .laby files (the .laby extension is unimportant) which you can use as a base. To load a file use the -f option, like this :
./levelEditor.py -f CryptOfThePharaoh.laby

The -f option also specifies the file to save to, even if it does not exist yet.

If your only argument is the file name, you can pass it directly, like this :
./levelEditor.py CryptOfThePharaoh.laby
It works the same as -f, but cannot be combined with other options ; hence you should use it only when loading a level, not when creating one.


** Creating levels : editor commands

Once in the editor, levels are displayed in the same way they are in game. However, there is no character in the editor ; instead, you control a cursor. The cursor is green, with its colour slightly changing depending on which square it is over (eg, it'll be slightly blue when over a spawn point). It can also go anywhere on the level, without attention to walls.

Note that when your cursor goes beyond the borders of the level, it turns grey and some commands won't do anything.

To use the cursor place it on a square and use a command :

Spacebar is the "switch" or "quickswitch" command. If the square you are over is a wall, it will become a pathway, and vice-versa.

R is the "replace" command. When you press R over a square, the editor will prompt you for additional input : S to replace the square by a spawn point, O to replace it with an objective, W to replace it with a wall, and P to replace it with a pathway. After pressing one of these (or any other key, which won't have any effects), you will be able to move the cursor and do other commands again.

B is the "brush" tool. It works very similarly to "replace", except that it stays active until you press a key other than the arrows. For instance, if you want to make a 10-squares long wall, press B, then W (for walls) and then move the cursor ; it'll automatically change the square colours beneath it.

T is the selection tool. After you have pressed T, all other commands are disabled ; you can draw a rectangle using your arrow keys and press T again to confirm you like that particular rectangle. After you have confirmed the selection, you'll have a choice of operations to make on the selected squares : Change them all to paths/walls/objectives/spawns, or "reverse", which makes every path a wall and vice-versa. Pressing any other key at that point will simply cancel the selection.

D is the "Metadata" command. Metadata is data that describes data ; so here, metadata will be data that describes the level (which is the "core" data). You can't edit all the metadata in the file (not high scores for instance), but you can change the name of the level, the name of the author, and the "level to follow". "Level to follow" allows you to create "playlists" of levels : one level, when finished, will prompt the player to play the next one. You should fill this with a filename, not a level name ; so it would be "CryptOfThePharaoh.laby" and not "Crypt of the Pharaoh".

S is the "save" command. A window will appear reminding you what name the saved file will have and asking you if you are sure ; press Y to confirm, or any other key to cancel.

Q is the "quit" command. A window will appear to ask for confirmation ; press Y to confirm you want to quit, or any other key to cancel.

Finally, H is the "help" command, which brings up a reminder of the in-editor commands.



** Creating levels : guidelines

The level editor is non-restrictive : you can place as many of whatever block you want, wherever you want (as long as it is within the borders of the level). However, you should follow some base guidelines if you want your levels to be playable. Obviously, spawn points should be linked to objectives, and so on. I will be mentioning some subtle points :

- You can place as many objectives as you want, and reaching any of them will complete the level. Placing no objectives means the level cannot be completed.

- Similarly, you can place as many spawn points as you want.. But all won't work. The game will pick one when loading the labyrinth, and stick with it. Other spawn points will still appear blue, though. You can also place zero spawn points, and the game will spawn the player character on an empty square.


** Level generator

Additionally, this game comes bundled with a level generator ; this program will generate rough but playable, levels. Nothing is stopping you from using an automatically generated level as a base for your own levels.

To use the level generator, simply execute levelGenerator.py as you would the game ; without any arguments, it will generate a 20*20 level and save it as "a.laby".

You can use arguments to set height, width, and output file name. You can also set the seed for the random generator ; this means that if you give the generator the same width, height and seed to work with twice, it will output the exact same level. Hence, you could share a level your particularly liked with your friends as "the 50*80 level with 'gargamel' as seed".

For concise and comprehensive list of options use the "help" argument.  


 Meddler's guide
=================

** Rebinding keys

In the game, keys can fairly easily be rebound, as key input is only managed in one place. Simply find the appropriate piece of code (search for "curses.KEY_LEFT", for instance) and rebind the keys as you wish.

Two things to take into consideration : first, the game expects a character, so "w" (a string) won't work whereas ord("w") (a character from a string) will ; second, keep in mind it's fairly common to hit the capslock key when playing.


This is not true for the editor, where key-managing functions are all over the place.


** Changing the player character

In game, the "character" defaults to a "x", but you can change this to whatever you like. Search for the first occurence of "playerCharacter" and change what it corresponds to.

Once again, this is not true for the level editor.


** Level format

I use .laby files, but they are actually simple text files written in a special format.

I should mention that empty lines are ignored and lines starting with "#" are comments and ignored as well.

First come a bunch of keywords, they can pretty much come in any order. Spaces are used to separate keywords from arguments, and arguments from other arguments. Some should be only written once :
name <level name>, any characters being allowed for the level name
author <author name>, that's for you, same rules as the name
nextlevel <file name>, that's a suggestion of a labyrinth to come after this one. Specify a file name, and the game will ask the player if they want to play it on game over.

Two can be written as many times as necessary :
color <color num> <RF> <GF> <BF> <RF> <GF> <BF>
This defines a new color pair ; <color num> is the type of block to get that color pair, where 0 the pathways, 1 the walls, 2 the objectives, 3 the spawn points. Then come three values between 0 and 1000 for the foreground color, and three for the background.
Obviously, you shouldn't be writing more than four of these.

highscore <score> <player>
This defines a highscore ; <score> is the number of moves it took, and <player> is a string (no spaces) with the name of the player. Order of the high scores is unimportant. You can put in as many as you want.

Finally, the "map" keyword signals we're going to describe the level. It's special, since map is immediatly followed by a newline. After the level description, the "end" keyword signals both the end of the level description and the file itself.

Between map and end is a grid of "0", "1", "2" and "3" : the "0" represent squares the player can go through, the "1" represent white squares (walls) the player can't pass. A "2" case is a target square : if the player reaches one of these, he wins the game. Finally, "3" is where the player spawns.

When the game processes the levels, it takes every "2" into account, but only the first "3" it sees ; so you can only have one spawn point (other spawn points will still appear blue in game, but the player won't spawn on them). If there is no "3" square in the level file, the game will pick the last "0" case it read from the file (so the lower right one) as spawn point.

Although this hasn't been tested, levels in theory don't have to be rectangular. But it is much easier to create a grid of "0" and work from there (without any drawbacks), hence why this hasn't been given further consideration.



 Developer's guide
===================

** Library

The library defines a Labyrinth class, which more or less corresponds to the save file. It's exclusively compatible with the new save file format (with the metadata).

In addition to these attributes, the class also has reading and parsing methods.


** Game

It's hard to write to stdout when inside ncurses, so this program is waiting for what main() will return to print errors. Same deal with the editor.

This game uses ncurses. It draws a title window and a pad beneath it, and enters a loop where it waits for user input to continue (ie, process the consequences of the input and refresh the display, before waiting again).


** Limitations to consider

Although using a pad made the game quite flexible to resizes, the title screen and game over window are not as lenient. For now, the entire game needs ~30 characters of wideness : should we work on this ?


** level generator

How the generator works :

1. generate a table full of 1s

2. designate semi-randomly starting and ending positions (they are always opposite to one another)

3. Repeatedly "take steps" (ie write 0s) in direction of the objective, with a chance not to go in the right direction for added randomness
3bis. If this takes too long, switch of the "go in the wrong direction" part and keep going straight for the objective. This writes a message to stderr.
3ter. If this still takes too long, break out of the loop and go to 4. This also writes a message to stderr.

4. Pick squares at random. If they're 1s, overwrite them with a 0.

5. Write resulting table to disk


Suggested Features
===================

** Game

The game should have a "back to starting position" button.

The game should support high scores

The game should support levels playlists


(DONE !) Level files should contain not only the pattern, but also additional metadata like what colours to use, what level is to follow this one, and what are the high scores


Editor and game key bindings should be read from a configuration file.
> dev note : I see no elegant solution to the problem caused by the fact we mix integer like KEY_LEFT, strings 'q'/'Q' and unicode integers


The editor should have an "undo" button.

The game & editor should have "square" graphics (like Bastet) : indeed, two spaces next to each other are much closer to a perfect square than just one space.

The game, instead of stopping the count at 9999, should replace the number of moves by "too many" when it's above a certain threshold.

The editor should offer to edit the filename to save to in the Metadata menu.
