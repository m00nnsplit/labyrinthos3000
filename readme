.:: Labyrinthos 3000 ::.
  FrÃ©gate Productions


 User's manual
===============

Launch the program with "python3 labyrinth.py" or simply "./labyrinth.py" when you're in the right folder. You do need the version 3 of python installed.


** Playing the game

Simply use the arrow keys to control the "x" representing your character. You can use the "Q" key to quit when playing, or just Ctrl+C.

Your goal is to reach the red square (or one of them, if there's more than one) ; you can't go through white squares ("walls").


** Game parameters

You can load levels in this game ! Simply write the path to the level file after the program when launching the game. A few levels are bundled with this game, but you can create your own.

Alternatively, you can call the game with the "-h" option : this will print a short help and exit.


** Creating levels : editor use

This game comes bundled with a level editor ; we will be talking about its use, and editing levels by hand will be talked about later in the Meddler's guide.

To use the level editor, execute levelEditor.py as you would the game. You have two ways to start the level editor : either start with a blank slate or edit an existing level. If you run the editor without specifying any arguments, it'll give you a blank slate will all default options and a warning message.

To start from scratch, two options are essential. The -h option specifies the height of the level and the -w options specifies its width. Both default to 20 ; you cannot edit those later, unless you start editing the levels by hand (see the Meddler's guide).

You can also use the -b option to tell the editor it should fill the slate with a particular block ; by default, it is filled with pathways.

An example of valid command would be :
./levelEditor.py -h 20 -w 35 -b 1

Here we are telling the editor we want a 20 squares high, 35 squares wide level, filled with walls.

You can also edit an existing level. This game comes bundled with .laby file (the .laby extension is unimportant) which you can use as a base. To load a file use the -f option, like this :
./levelEditor.py -f CryptOfThePharaoh.laby

The -f option also specifies the file to save to, even if it does not exist yet ; but then remember to set the width and height options !

If your only argument is the file name, you can pass it directly, like this :
./levelEditor.py CryptOfThePharaoh.laby
It works the same as -f, but cannot be combined with other options


** Creating levels : editor commands

Once in the editor, levels are displayed in the same way they are in game. However, there is no character in the editor ; instead, you control a cursor. The cursor is green, with its colour slightly changing depending on which square it is over (eg, it'll be slightly blue when over a spawn point). It can also go anywhere on the level, without attention to walls.

Note that when your cursor goes beyond the borders of the level, it turns grey and commands won't do anything.

To use the cursor place it on a square and use a command :

Space is the "switch" or "quickswitch" command. If the square you are over is a wall, it will become a pathway, and vice-versa.

R is the "replace" command. When you press R over a square, the editor will prompt you for additional input : S to replace the square by a spawn point, O to replace it with an objective, W to replace it with a wall, and P to replace it with a pathway. After pressing one of these (or any other key, which will have no effect), you will be able to move the cursor and do other commands again.

T is the selection tool. After you have pressed T, all other commands are disabled ; you can draw a rectangle using your arrow keys and press T again to confirm you like that particular rectangle. After you have confirmed the selection, you'll have a choice of operations to make on the selected squares : Change them all to paths/walls/objectives/spawns, or "reverse", which makes every path a wall and vice-versa. Pressing any other key at that point will simply cancel the selection.

S is the "save" command. A window will appear reminding you what name the saved file will have and asking you if you are sure ; press Y to confirm, or any other key to cancel.

Q is the "quit" command. A window will appear to ask for confirmation ; press Y to confirm you want to quit, or any other key to cancel.

Finally, H is the "help" command, which brings up a reminder of the in-editor commands.

More commands are to come !


** Creating levels : guidelines

The level editor is non-restricting : you can place as many of whatever block you want, wherever you want (as long as it is within the borders of the level). However, you should follow some base guidelines if you want your levels to be playable. Obviously, spawn points should be linked to objectives, and so on. I will be mentioning some subtle points :

- You can place as many objectives as you want, and reaching any of them will complete the level. Placing no objectives means the level cannot be completed.

- Similarly, you can place as many spawn points as you want.. But all won't work. The game will pick one when loading the labyrinth, and stick with it. Other spawn points will still appear blue, though. You can also place zero spawn points, and the game will spawn the player character on an empty square.


** Level generator

Additionally, this game comes bundled with a level generator ; this program will generate rough but playable, rectangular levels. Nothing is stopping you from using an automatically generated level as a base for your own levels.

To use the level generator, simply execute levelGenerator.py as you would the game ; without any arguments, it will generate a 20*20 level and save it as "a.laby".

You can use arguments to set height, width, and output file name. You can also set the seed for the random generator ; this means that if you give the generator the same width, height and seed to work with twice, it will output the exact same level. Hence, you could share a level your particularly liked with your friends as "the 50*80 level with 'gargamel' as seed".

For concise and comprehensive list of options use the "help" argument.  


 Meddler's guide
=================

** Rebinding keys

Keys can fairly easily be rebound, as key input is only managed in one place. Simply find the appropriate piece of code (search for "curses.KEY_LEFT", for instance) and rebind the keys as you wish.

Two things to take into consideration : first, the game expects a character, so "w" (a string) won't work whereas ord("w") (a character from a string) will ; second, keep in mind it's fairly common to hit the capslock key when playing.


** Changing the player character

The "character" defaults to a "x", but you can change this to whatever you like. Search for the first occurence of "playerCharacter" and change what it corresponds to.


** Level format

I use .laby files, but they are actually simple text files written in a special format.

The files only contain a grid of "0", "1", "2" and "3" : the "0" represent squares the player can go through, the "1" represent white squares (walls) the player can't pass. A "2" case is a target square : if the player reaches one of these, he wins the game. Finally, "3" is where the player spawns.

When the game processes the levels, it takes every "2" into account, but only the first "3" it sees ; so you can only have one spawn point (other spawn points will still appear blue in game, but the player won't spawn on them). If there is no "3" square in the level file, the game will pick the last "0" case it read from the file as spawn point.

Although this hasn't been tested, levels in theory don't have to be rectangular. But it is much easier to create a grid of "0" and work from there, hence why this hasn't been tested.



 Developer's guide
===================

It's hard to write to stdout when inside ncurses, so this program does :

execute errorOutput
 -> which executes curses.wrapper(main), expecting a returned value
   -> which sets up curses and runs main(), returning what it returns
     -> which returns things only on errors

This game uses ncurses. It draws a title window and a pad beneath it, and enters a loop where it waits for user input to continue (ie, process the consequences of the input and refresh the display, before waiting again).


** Limitations to consider

Although using a pad made the game quite flexible to resizes, the title screen and game over window are not as lenient. For now, the entire game needs ~30 characters of wideness : should we work on this ?


** level generator

How the generator works :

1. generate a table full of 1s

2. designate semi-randomly starting and ending positions (they are always opposite to one another)

3. Repeatedly "take steps" (ie write 0s) in direction of the objective, with a chance not to go in the right direction for added randomness
3bis. If this takes too long, switch of the "go in the wrong direction" part and keep going straight for the objective. This writes a message to stderr.
3ter. If this still takes too long, break out of the loop and go to 4. This also writes a message to stderr.

4. Pick squares at random. If they're 1s, overwrite them with a 0.

5. Write resulting table to disk
